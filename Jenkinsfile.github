/*
 *
 *  MIT License
 *
 *  (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library') _


// Only consider X.Y.Z and X.Y.Z tags as stable.
// Never consider X.Y.Z{[a|b|rc} or X.Y.Z.* tags as stable.
// The ==~ operator performs an exact match.
def stableToken = ~/v?\d+\.\d+\.\d+/
def isStable = (env.TAG_NAME != null & env.TAG_NAME ==~ stableToken) ? true : false
def sleImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle:latest'
pipeline {

    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()
        timeout(time: 20, unit: 'MINUTES')
        timestamps()
    }

    environment {
        NAME = getRepoName()
        PRIMARY_NODE = "${env.NODE_NAME}"
        VERSION = sh(returnStdout: true, script: "git describe --tags | tr -s '-' '~' | sed 's/^v//'").trim()
    }


    stages {

        stage('Build & Publish') {

            stages {

                stage('Prepare: RPMs') {
                    agent {
                        docker {
                            label "${PRIMARY_NODE}"
                            reuseNode true
                            image "${sleImage}"
                        }
                    }
                    steps {
                        runLibraryScript("addRpmMetaData.sh", "${env.NAME}.spec")
                        sh "make prepare"
                        sh "git update-index --assume-unchanged ${env.NAME}.spec"
                    }
                }

                stage('Build: RPMs') {
                    agent {
                        docker {
                            label "${PRIMARY_NODE}"
                            reuseNode true
                            image "${sleImage}"
                        }
                    }
                    steps {
                        sh "make rpm"
                    }
                }

                stage('Publish: RPMs') {
                    agent {
                        docker {
                            label "${PRIMARY_NODE}"
                            reuseNode true
                            args "-v /home/jenkins/.ssh:/home/jenkins/.ssh"
                            image "${sleImage}"
                        }
                    }
                    steps {
                        script {
                            publishCsmRpms(arch: "noarch",
                                    component: env.NAME,
                                    isStable: isStable,
                                    os: "noos",
                                    pattern: "dist/rpmbuild/RPMS/noarch/*.rpm",
                            )
                            publishCsmRpms(arch: "src",
                                    component: env.NAME,
                                    isStable: isStable,
                                    os: "noos",
                                    pattern: "dist/rpmbuild/SRPMS/*.rpm",
                            )
                        }
                    }
                }
            }
        }
    }
}
