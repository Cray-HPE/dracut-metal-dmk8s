@Library('csm-shared-library') _

def sleVersion = '15.3'
def isStable = env.TAG_NAME != null ? true : false
pipeline {
  agent {
    label "metal-gcp-builder"
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: "10"))
    disableConcurrentBuilds()
    timeout(time: 20, unit: 'MINUTES')
    timestamps()
  }

  environment {
    IS_STABLE = getBuildIsStable()
    BUILD_METADATA = getRpmRevision(isStable: isStable)
    GIT_REPO_NAME = getRepoName()
    VERSION = sh(returnStdout: true, script: "git describe --tags | tr -s '-' '~' | tr -d '^v'").trim()
  }

  stages {

    stage("Prepare: RPM") {
      agent {
        docker {
          image "artifactory.algol60.net/csm-docker/stable/csm-docker-sle:${sleVersion}"
          reuseNode true
        }
      }
      steps {
        script {
          runLibraryScript("addRpmMetaData.sh", "${env.GIT_REPO_NAME}.spec")
          sh "make prepare"
        }
      }
    }

    stage('Build: RPM') {
      agent {
        docker {
          image "artifactory.algol60.net/csm-docker/stable/csm-docker-sle:${sleVersion}"
          reuseNode true
        }
      }
      steps {
        sh "make rpm"
      }
    }

    stage('Publish') {
      steps {
        script {
          publishCsmRpms(component: env.GIT_REPO_NAME, pattern: "dist/rpmbuild/RPMS/noarch/*.rpm", os: "sle-15sp2", arch: "noarch", isStable: isStable)
          publishCsmRpms(component: env.GIT_REPO_NAME, pattern: "dist/rpmbuild/RPMS/noarch/*.rpm", os: "sle-15sp3", arch: "noarch", isStable: isStable)
          publishCsmRpms(component: env.GIT_REPO_NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", os: "sle-15sp2", arch: "src", isStable: isStable)
          publishCsmRpms(component: env.GIT_REPO_NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", os: "sle-15sp3", arch: "src", isStable: isStable)
        }
      }
    }
  }
}
